// <auto-generated />
using System;
using INF.CommApp.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace INF.CommApp.DATA.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025230608_AddExternalIds")]
    partial class AddExternalIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("INF.CommApp.DATA.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Agencies_ExternalId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Facilities_ExternalId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Notifications_ExternalId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.NotificationSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSubscriptions");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Resident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Residents_ExternalId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_ExternalId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.UserResident", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ResidentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ResidentId");

                    b.HasIndex("ResidentId");

                    b.ToTable("UserResidents");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Notification", b =>
                {
                    b.HasOne("INF.CommApp.DATA.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.NotificationSubscription", b =>
                {
                    b.HasOne("INF.CommApp.DATA.Models.Notification", "Notification")
                        .WithMany("NotificationSubscriptions")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INF.CommApp.DATA.Models.User", "User")
                        .WithMany("NotificationSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Resident", b =>
                {
                    b.HasOne("INF.CommApp.DATA.Models.Facility", "Facility")
                        .WithMany("Residents")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.User", b =>
                {
                    b.HasOne("INF.CommApp.DATA.Models.Agency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.UserResident", b =>
                {
                    b.HasOne("INF.CommApp.DATA.Models.Resident", "Resident")
                        .WithMany("UserResidents")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INF.CommApp.DATA.Models.User", "User")
                        .WithMany("UserResidents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Agency", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Facility", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Notification", b =>
                {
                    b.Navigation("NotificationSubscriptions");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.Resident", b =>
                {
                    b.Navigation("UserResidents");
                });

            modelBuilder.Entity("INF.CommApp.DATA.Models.User", b =>
                {
                    b.Navigation("NotificationSubscriptions");

                    b.Navigation("UserResidents");
                });
#pragma warning restore 612, 618
        }
    }
}
